"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin management, handled by Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'scrooloose/syntastic'
Plugin 'vhda/verilog_systemverilog.vim'
Plugin 'tell-k/vim-autopep8'
Plugin 'derekwyatt/vim-scala'
Plugin 'tpope/vim-sensible'
Plugin 'tomlion/vim-solidity'
Plugin 'keith/swift.vim'
Plugin 'posva/vim-vue'
Plugin 'junegunn/fzf.vim'
Plugin 'Chiel92/vim-autoformat'
Plugin 'vim-scripts/AnsiEsc.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'hecal3/vim-leader-guide'
Plugin 'junegunn/goyo.vim'
Plugin 'liuchengxu/space-vim-dark'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'craigemery/vim-autotag'
Plugin 'lifepillar/vim-mucomplete'
Plugin 'scrooloose/nerdtree'
Plugin 'ryanoasis/vim-devicons'
Plugin 'mhinz/vim-startify'
Plugin 'damofthemoon/vim-svtb'
Plugin 'junegunn/rainbow_parentheses.vim'

call vundle#end()
filetype plugin indent on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader key setup, handled with vim-leader-guide plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use space bar as leader key
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

" Shorten plugin display time when pressing space
set timeoutlen=1

" Make the menu to pop up when pressing space
call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>

" Shortcut created and handled by Vim-leader-guide
let g:lmap = {'name':  "",
             \'f': [":Files",                       "FZF file search"],
             \'b': [":Buffers",                     "FZF buffer search"],
             \'s': [":BLines",                      "FZF text search into current buffer"],
             \'S': [":Lines",                       "FZF text search across loaded buffers"],
             \'g': [":BCommits",                    "FZF git commits of the current buffer"],
             \'G': [":Commits",                     "FZF git commits of the repository"],
             \'v': [':vsplit',                      'Split buffer vertically'],
             \'h': [':split',                       'Split buffer horizontally'],
             \'d': [':bd',                          'Close buffer'],
             \'D': [':Bd',                          'Close buffer, but not the panel'],
             \'r': [':so $MYVIMRC',                 'Reload vimrc without restarting Vim'],
             \'q': [':wq',                          'Write buffer and close'],
             \'w': [':w',                           'Write buffer'],
             \'W': [':w !sudo tee % > /dev/null',   'Write buffer with Sudo rights'],
             \'l': [':ls',                          'List opened buffers'],
             \'p': [':call Prettify()',             'Prettify the buffer'],
             \'z': [':Goyo',                        'Enter in Zen mode'],
             \'t': [':Tags',                        'FZF tag search'],
             \'o': [':normal gf',                   'Open file under cursor'],
             \'n': [':NERDTreeToggle',              'Open/Close NerdTree'],
             \}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable 256 colors" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif

" Color scheme
set background=dark
colorscheme space-vim-dark

if $TERM_PROGRAM =~ 'Terminal'
    hi Normal     ctermbg=NONE guibg=NONE
    hi LineNr     ctermbg=NONE guibg=NONE
    hi SignColumn ctermbg=NONE guibg=NONE
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=UTF-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Always show the status line
set laststatus=2

" display on status line:
"   - buffer number,
"   - line number / max line
"   - file name
set statusline=
set statusline+=buffer\ %n\ -
set statusline+=\ line\ %l/%L\ -
set statusline+=\ %f

" Display Wild menu
set wildmenu""
set wildmode=longest:full,full

" Display line numbers
set number
set numberwidth=4

" Enable mouse in all modes
set mouse=a

" Use spaces instead of tabs
set expandtab
" Deine 1 tab = 4 spaces
set tabstop=4
set shiftwidth=4
set shiftround
" Auto indent lines
set autoindent
set smartindent

" Display max column width recommanded
set colorcolumn=100
" Display current line
set cursorline

" Display matched bracket or parenthesis
set showmatch

" Display pattern found while typing
set incsearch
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases
set smartcase
" Highlight search results
set hlsearch

" Disable backup and swap
set nobackup
set noswapfile

" Auto comment new line if previous one was a comment
set formatoptions+=r

" A buffer becomes hidden when it is abandoned
set hidden

" shift-enter insert a new line
" but do not enter in insert mode
nmap <S-Enter> O<Esc>j
nmap <CR> o<Esc>k

" Close a buffer, but not the panel
command Bd bp | sp | bn | bd

" Strip whitespaces and tabs on buffer write
autocmd BufWritePre <buffer> :call <SID>StripWsTabs()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable fzf
set rtp+=~/.fzf

" ctrl-h or ctrl-v can be pressed to open a file found
" into a new panel
let g:fzf_action = {
            \ 'ctrl-h': 'split',
            \ 'ctrl-v': 'vsplit' }

" Open FZF in the middle of the screen.
" Can be down / up / left / right
let g:fzf_layout = { 'up': '~50%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
let g:syntastic_loc_list_height = 3


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autopep8 setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable show diff version of autopep8
let g:autopep8_disable_show_diff=1
" Automatically format the file on save
let g:autopep8_on_save = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AutoFormat setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

" Scala setup
let g:formatdef_scalafmt = "'scalafmt --stdin'"
let g:formatters_scala = ['scalafmt']

" Python setup
let g:formatter_yapf_style = 'pep8'
let g:formatters_python = ['autopep8']


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_auto_extension_ext = 'txt'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CTags & Autotag setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <C-T> <C-]>
set tags=./tags;,tags;

let g:autotagTagsFile="./tags"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Completion and Mucomplete setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set omnifunc=syntaxcomplete#Complete

let g:mucomplete#enable_auto_at_startup = 1
set completeopt+=menuone
set completeopt+=noinsert


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rainbow Paranthesis
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

au VimEnter * RainbowParentheses
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']']]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Startify
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ascii = [
      \ '                        __',
      \ '                .--.--.|__|.--------.',
      \ '                |  |  ||  ||        |',
      \ '                |  |  ||  ||  |  |  |',
      \ '                 \___/ |__||__|__|__|',
      \ '',
      \]

let g:footer_common = [
      \ '',
      \ 'Many shortcuts available in space bar. PRESS IT!',
      \ '',
      \ '  - FZF to search buffer, file, ctags, git, text pattern',
      \ '  - Split vertically/horizontally the panel',
      \ '  - Toggle NERDTree',
      \ '  - Prettify buffer',
      \ '  - Open file under cursor',
      \ '  - Zen mode to write peacefully',
      \ '  - list, write (force), close buffer',
      \ '',
      \ 'Vim: w/b: jump forward/backward word, e: word end',
      \ 'Vim: )/(: jump forward/backward phrase, }/{: jump forward/backward paragraph',
      \ 'Vim: H/M/L: jump to the high/middle/low of the screen',
      \ 'Vim: `Ctrl-w =` to resize equally panels',
      \ 'Vim: `Ctrl-t` on word to parse ctags',
      \ 'TMux: `Ctrl-b z` to zoom/unzoom in panel',
      \ 'TMux: `Ctrl-b up/down/left/right` to navigate in panels',
      \ '',
      \]

let g:startify_custom_header = g:ascii + startify#fortune#boxed() + g:footer_common

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File types setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Open templates when editing a new file
au bufNewFile *.cpp 0r ~/.vim/templates/template.cpp
au bufNewFile *.h 0r ~/.vim/templates/template.h
au bufNewFile *.v 0r ~/.vim/templates/template.v
au bufNewFile *.html 0r ~/.vim/templates/template.html
au bufNewFile *.py 0r ~/.vim/templates/template.py
au bufNewFile *.scala 0r ~/.vim/templates/template.scala

" Run systemVerilog plugin for these file extensions
au BufNewFile, BufRead *.sv, *.svh, *.vh, *.v so ~/.vim/bundle/systemverilog.vim/syntax/systemverilog.vim

" Specify JSON syntax checking for Javascript
au BufRead, BufNewFile *.json set filetype=javascript

" Specify Markdown syntax checking for these extensions
au BufRead, BufNewFile *.mkd, *.markdown, *.mdwn, *.mk, *.md set filetype=markdown

" Insert tabs, not spaces for Makefile
autocmd FileType make setlocal noexpandtab

" Vue.js setup
autocmd FileType vue syntax sync fromstart
autocmd BufRead, BufNewFile *.vue setlocal filetype=vue.html.javascript.css
let g:vue_disable_pre_processors=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Pretiffy a XML file
function! PrettyXML()

    " save the filetype so we can restore it later
    let l:origft = &ft
    set ft=

    " delete the xml header if it exists. This will
    " permit us to surround the document with fake tags
    " without creating invalid xml.
    1s/<?xml .*?>//e

    " insert fake tags around the entire document.
    " This will permit us to pretty-format excerpts of
    " XML that may contain multiple top-level elements.
    0put ='<PrettyXML>'
    $put ='</PrettyXML>'
    silent %!xmllint --format -

    " xmllint will insert an <?xml?> header. it's easy enough to delete
    " if you don't want it.
    " delete the fake tags
    2d
    $d

    " restore the 'normal' indentation, which is one extra level
    " too deep due to the extra tags we wrapped around the document.
    silent %<

    " restore the filetype
    exe "set ft=" . l:origft

endfunction

" Remove useless white spaces and convert tabs
function! <SID>StripWsTabs()

    " Save cursor place
    let l = line(".")
    let c = col(".")

    " Clean up spaces/tabs
    retab
    %s/\t/    /e
    %s/\s\+$//e

    " Restore cursor
    call cursor(l, c)

endfunction

" Prettify a buffer
function! Prettify()

    " Save cursor place
    let l = line(".")
    let c = col(".")

    " Get filetype
    let _ft = &filetype

    " Prettify based on extension
    if _ft ==? "json"
        silent %!python -m json.tool
    elseif _ft == "xml"
        call PrettyXML()
    else
        "normal gg=G
        Autoformat
    endif

    " Clean up spaces/tabs and restore cursor
    call <SID>StripWsTabs()
    call cursor(l, c)

endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Verilog snippet
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

iab <for> for (i=0;i<max;i=i+1)<cr>begin<cr>end

iab <always> always @ (posedge aclk or negedge arstn) begin<cr><cr>
            \if (arstn == 1'b0) begin<cr>end<cr>else begin<cr>end<cr><bs>end

iab <fsm> localparam [3:0] IDLE = 0, STATE1 = 1;<cr>reg[3:0] state;<cr><cr>
            \always @ (posedge aclk or negedge arstn)<cr>begin<cr>if (arstn==1'b0)
            \begin<cr>state <= IDLE;<cr>end<cr>else begin<cr>case (state)<cr>
            \default : begin<cr>end<cr>STATE1: begin<cr>end<cr><bs>endcase<cr><bs>end<cr><bs>end

iab <function> function integer myFunc(input integer i);<cr>begin<cr>end<cr>endfunction

iab <task> task myTask;<cr>begin<cr>end<cr>endtask<cr>
